/* Generated By:JavaCC: Do not edit this line. ParserRegex.java */
  package uniandes.teolen.parserJavaCC.parserRegex;

  import java.util.*;

  public class ParserRegex implements ParserRegexConstants {
      public List<String> variables = new ArrayList<String>();

      public HashMap<String, ArrayList<String>> funciones = new HashMap<String, ArrayList<String>>();

  final public void expsRegs() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DEF:
        define();
        break;
      case VAR:
        declararVariable();
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
      case DEF:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
    }
    print();
  }

  final public void define() throws ParseException {
     ArrayList<String> parametros;
    jj_consume_token(DEF);
    parametros = addFuncion();
    jj_consume_token(30);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RESTA:
    case NUMERO:
    case VARIABLE:
    case 31:
    case 34:
      arithmeticExpression(parametros);
      break;
    case IFStatement:
      ifFunction(parametros);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void arithmeticExpression(ArrayList<String> parametros) throws ParseException {
    exp(parametros);
  }

  final public void ifFunction(ArrayList<String> parametros) throws ParseException {
    jj_consume_token(IFStatement);
    jj_consume_token(31);
    negacion();
    jj_consume_token(32);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RESTA:
    case NUMERO:
    case VARIABLE:
    case 31:
    case 34:
      exp(parametros);
      break;
    case IFStatement:
      ifFunction(parametros);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(32);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RESTA:
    case NUMERO:
    case VARIABLE:
    case 31:
    case 34:
      exp(parametros);
      break;
    case IFStatement:
      ifFunction(parametros);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(33);
  }

  final public void orUnir() throws ParseException {
    andUnir();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_2;
      }
      jj_consume_token(OR);
      andUnir();
    }
  }

  final public void andUnir() throws ParseException {
    negacion();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_3;
      }
      jj_consume_token(AND);
      negacion();
    }
  }

  final public void negacion() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    label_4:
    while (true) {
      if (jj_2_1(3)) {
        exp(null);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MAYOR:
          jj_consume_token(MAYOR);
          break;
        case MENOR:
          jj_consume_token(MENOR);
          break;
        case MENORIGUAL:
          jj_consume_token(MENORIGUAL);
          break;
        case MAYORIGUAL:
          jj_consume_token(MAYORIGUAL);
          break;
        case IGUAL:
          jj_consume_token(IGUAL);
          break;
        case DIFERENTE:
          jj_consume_token(DIFERENTE);
          break;
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        exp(null);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 31:
          jj_consume_token(31);
          orUnir();
          jj_consume_token(33);
          break;
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RESTA:
      case NUMERO:
      case VARIABLE:
      case 31:
      case 34:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_4;
      }
    }
  }

  final public void print() throws ParseException {
    jj_consume_token(PRINT);
    jj_consume_token(31);
    label_5:
    while (true) {
      if (jj_2_2(2)) {
        funcionDeclarada();
      } else if (jj_2_3(2)) {
        variableDeclarada();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RESTA:
        case NUMERO:
        case VARIABLE:
        case 31:
        case 34:
          exp();
          break;
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RESTA:
      case NUMERO:
      case VARIABLE:
      case 31:
      case 34:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_5;
      }
    }
    jj_consume_token(33);
  }

  final public void declararVariable() throws ParseException {
    jj_consume_token(VAR);
    addNombreVariable(null, false);
    jj_consume_token(ASIGNACION);
    jj_consume_token(NUMERO);
  }

  final public void exp(ArrayList<String> parametros) throws ParseException {
    term(parametros);
    label_6:
    while (true) {
      if (jj_2_4(2)) {
        ;
      } else {
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SUMA:
        jj_consume_token(SUMA);
        term(parametros);
        break;
      case RESTA:
        jj_consume_token(RESTA);
        term(parametros);
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void term(ArrayList<String> parametros) throws ParseException {
    fact(parametros);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLICACION:
      case DIVISION:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLICACION:
        jj_consume_token(MULTIPLICACION);
        fact(parametros);
        break;
      case DIVISION:
        jj_consume_token(DIVISION);
        fact(parametros);
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void fact(ArrayList<String> parametros) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RESTA:
      jj_consume_token(RESTA);
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMERO:
      jj_consume_token(NUMERO);
      break;
    case 31:
      jj_consume_token(31);
      exp(parametros);
      jj_consume_token(33);
      break;
    case VARIABLE:
      variableDeclarada(parametros);
      break;
    case 34:
      jj_consume_token(34);
      exp(parametros);
      jj_consume_token(35);
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void addFuncion() throws ParseException, Error {
      Token funcion;
      ArrayList<String> parametros = new        ArrayList<String>();
    funcion = jj_consume_token(VARIABLE);
    jj_consume_token(31);
    parametro(parametros);
    jj_consume_token(33);
           funciones.put(function.image, parametros);
  }

  final public void parametro(ArrayList<String> parametros) throws ParseException {
    addNombreVariable(parametros, true);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 32:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_8;
      }
      jj_consume_token(32);
      addNombreVariable(parametros, true);
    }
  }

  final public void addNombreVariable(ArrayList<String> parametros,boolean b) throws ParseException, Error {
      Token variable;
    variable = jj_consume_token(VARIABLE);
          if(!b){
              boolean centinela = false;
              for(int i = 0; i < variables.size() && !centinela; i++)
              {
                    if(variables.get(i).equals(variable.image))
                    {
                       centinela = true;
                       {if (true) throw new Error("La variable: " + variable.image+" ya existe.");}
                    }
              }
              if(!centinela)
              {
                  variables.add(variable.image);
              }
          }
          else{
              parametros.add(variable.image);
          }
  }

  final public void expresion() throws ParseException {
    expresionPeque();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SUMA:
      jj_consume_token(SUMA);
      break;
    case MULTIPLICACION:
      jj_consume_token(MULTIPLICACION);
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void expresionPeque() throws ParseException {
    if (jj_2_5(2)) {
      funcionDeclarada();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VARIABLE:
        variableDeclarada(null);
        break;
      case 31:
        jj_consume_token(31);
        expresion();
        jj_consume_token(33);
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void funcionDeclarada() throws ParseException {
      Token funcion;
    funcion = jj_consume_token(VARIABLE);
          boolean centinela = false;
          String[] separadoParentesis = funcion.image.split("(");
          Iterator iterator = funciones.entrySet().iterator();
          while(iterator.hasNext()&& !centinela)
          {
                if(funciones.get(i).equals(funcion.image))
                {
                   centinela = true;
                }
          }
          if(!centinela)
          {
              {if (true) throw new Error("La funcion:" + funcion.image +"no ha sido declarada.");}
          }
  }

  final public void variableDeclarada(ArrayList<String> parametros) throws ParseException {
    Token variable;
    variable = jj_consume_token(VARIABLE);
          boolean centinela = false;
          if(parametros !=null){
              for(int i = 0; i < parametros.size() && !centinela; i++)
              {
                    if(parametros.get(i).equals(variable.image))
                    {
                      centinela = true;
                    }
              }

          }
          else{
              for(int i = 0; i < variables.size() && !centinela; i++)
              {
                  if(variables.get(i).equals(variable.image))
                  {
                      centinela = true;
                  }
              }

          }

          if(!centinela)
          {
              {if (true) throw new Error("La variable:" + variable.image+"no ha sido declarado en el alfabeto.");}
          }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_3R_14() {
    if (jj_3R_15()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_16()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_scan_token(34)) return true;
    if (jj_3R_9()) return true;
    if (jj_scan_token(35)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_9() {
    if (jj_3R_14()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_4()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_10() {
    if (jj_scan_token(VARIABLE)) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_scan_token(31)) return true;
    if (jj_3R_9()) return true;
    if (jj_scan_token(33)) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_9()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(8)) {
    jj_scanpos = xsp;
    if (jj_scan_token(7)) {
    jj_scanpos = xsp;
    if (jj_scan_token(9)) {
    jj_scanpos = xsp;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(11)) {
    jj_scanpos = xsp;
    if (jj_scan_token(12)) return true;
    }
    }
    }
    }
    }
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_scan_token(SUMA)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) return true;
    }
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_scan_token(MULTIPLICACION)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_scan_token(VARIABLE)) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(22)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(28)) {
    jj_scanpos = xsp;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_scan_token(DIVISION)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3_4() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) return true;
    }
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_scan_token(RESTA)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ParserRegexTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[21];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x2040,0x2040,0xb0408000,0xb0408000,0xb0408000,0x40000,0x20000,0x10000,0x1f80,0x80000000,0xb0400000,0xb0400000,0xb0400000,0x600000,0x1800000,0x1800000,0x400000,0xb0000000,0x0,0xa00000,0xa0000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x4,0x4,0x4,0x0,0x0,0x0,0x0,0x0,0x4,0x4,0x4,0x0,0x0,0x0,0x0,0x4,0x1,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[5];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public ParserRegex(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ParserRegex(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserRegexTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public ParserRegex(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserRegexTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public ParserRegex(ParserRegexTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserRegexTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[36];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 21; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 36; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 5; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

  }
