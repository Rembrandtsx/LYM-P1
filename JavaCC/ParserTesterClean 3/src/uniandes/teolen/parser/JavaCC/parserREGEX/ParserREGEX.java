/* Generated By:JavaCC: Do not edit this line. ParserREGEX.java */
package uniandes.teolen.parserJavaCC.parserREGEX;

import java.util.*;

public class ParserREGEX implements ParserREGEXConstants {
        public List<String> variables = new ArrayList<String>();
        public List<String> alphabet = new ArrayList<String>();

  final public void expsRegs() throws ParseException {
    jj_consume_token(BEGIN);
    contenido();
    jj_consume_token(END);
  }

  final public void contenido() throws ParseException {
    jj_consume_token(ALPHABETDECLARATION);
    jj_consume_token(DD);
    alphabet();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      variable();
      jj_consume_token(EQUAL);
      regex();
      jj_consume_token(21);
    }
  }

  final public void alphabet() throws ParseException {
    jj_consume_token(22);
    addSymbolAlphabet();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 23:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      jj_consume_token(23);
      addSymbolAlphabet();
    }
    jj_consume_token(24);
  }

  final public void addSymbolAlphabet() throws ParseException, Error {
        Token simbolo;
    simbolo = jj_consume_token(SYMBOL);
                boolean centinela = false;
                for(int i = 0; i < alphabet.size() && !centinela; i++)
                {
                          if(alphabet.get(i).equals(simbolo.image))
                          {
                             centinela = true;
                             {if (true) throw new Error("El Simbolo:" + simbolo.image+"ya existe.");}
                          }
                }
                if(!centinela)
                {
                        alphabet.add(simbolo.image);
                }
  }

  final public void variable() throws ParseException {
        Token variable;
    variable = jj_consume_token(VAR);
                boolean centinela = false;
                for(int i = 0; i < variables.size() && !centinela; i++)
                {
                          if(variables.get(i).equals(variable.image))
                          {
                             centinela = true;
                             {if (true) throw new Error("La variable: " + variable.image+" ya existe.");}
                          }
                }
                if(!centinela)
                {
                        variables.add(variable.image);
                }
  }

  final public void regex() throws ParseException {
    expresion();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_3;
      }
      jj_consume_token(OR);
      expresion();
    }
  }

  final public void expresion() throws ParseException {
    expresionPeque();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
      break;
    case MULTIPLY:
      jj_consume_token(MULTIPLY);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void expresionPeque() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SYMBOL:
      simboloDeclarado();
      break;
    case VAR:
      variableDeclarada();
      break;
    case CADENAVACIA:
      jj_consume_token(CADENAVACIA);
      break;
    case VACIO:
      jj_consume_token(VACIO);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void simboloDeclarado() throws ParseException {
        Token simbolo;
    simbolo = jj_consume_token(SYMBOL);
                boolean centinela = false;
                for(int i = 0; i < alphabet.size() && !centinela; i++)
                {
                          if(alphabet.get(i).equals(simbolo.image))
                          {
                             centinela = true;

                          }
                }
                if(!centinela)
                {
                        {if (true) throw new Error("El Simbolo:" + simbolo.image+"no ha sido declarado en el alfabeto.");}
                }
  }

  final public void variableDeclarada() throws ParseException {
  Token variable;
    variable = jj_consume_token(VAR);
                boolean centinela = false;
                for(int i = 0; i < variables.size() && !centinela; i++)
                {
                          if(variables.get(i).equals(variable.image))
                          {
                             centinela = true;

                          }
                }
                if(!centinela)
                {
                        {if (true) throw new Error("El Simbolo:" + simbolo.image+"no ha sido declarado en el alfabeto.");}
                }
  }

  /** Generated Token Manager. */
  public ParserREGEXTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[5];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x100000,0x800000,0x40,0x6000,0x181800,};
   }

  /** Constructor with InputStream. */
  public ParserREGEX(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ParserREGEX(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserREGEXTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public ParserREGEX(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserREGEXTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public ParserREGEX(ParserREGEXTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserREGEXTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[25];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 5; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 25; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
