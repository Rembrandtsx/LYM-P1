/**
 * PARSER ARITMETICO 
 * Camilo Salinas -- ca.salinas
 * Camila Londoño -- mc.londono
 */

options {
    IGNORE_CASE = false;
    STATIC = false;
  }
  PARSER_BEGIN(ParserAritmetico)
  package uniandes.teolen.parserJavaCC.parserRegex;
  
  import java.util.*;
   
  public class ParserAritmetico {
      public List<String> variables = new ArrayList<String>();
      
      public HashMap<String, ArrayList<String>> funciones = new HashMap<String, ArrayList<String>>();
  } 
  
  PARSER_END(ParserAritmetico)
  SKIP :
  {
      " " | "\r" | "\t" | "\n"
  
  }
  TOKEN : /* OPERATORS */
  {
      < ASIGNACION: "=" >
  |   < VAR: "var" >
  |   < MENOR: "<" >
  |   < MAYOR: ">" >
  |   < MENORIGUAL: "<=" >
  |   < MAYORIGUAL: " >=" >
  |   < IGUAL: "==" >
  |   < DIFERENTE: "!=" >
  |   < DEF: "define" >
  |   < PRINT: "print" >
  |   < IFStatement: "if">
  |   < NOT: "not" >
  |   < AND: "and" >
  |   < OR: "or" >
  |   < FALSE:"false">
  |   < TRUE: "true">
  |	  < SUMA : "+">
  |	  < RESTA: "-">
  |	  < MULTIPLICACION : "*">
  |	  < DIVISION: "/">
  
  }
  
  TOKEN :
  {
      < #DIGIT: ["0"-"9"] >
  |   < #MAY : ["A"-"Z"] >
  |   < #MIN : ["a"-"z"] >
  |   < NUMERO : (< DIGIT >)(< DIGIT >)* >
  |   < VARIABLE :  <MAY > | < MIN > (<MAY > | < MIN >| < DIGIT >)* >
  
  }
  
  void expsAritmetica():
  {}
  {
    (define()|declararVariable())+ print()		  
  }
  
  
  void define():
  {
     ArrayList<String> parametros = null; 
  }
  {
      <DEF> ( { parametros = addFuncion(); })":"(arithmeticExpression(parametros)|ifFunction(parametros) )   
  }
  
  void arithmeticExpression(ArrayList<String> parametros):
  {}
  {
      exp(parametros)
  }
  
  void ifFunction(ArrayList<String> parametros) :
  {}
  {
      <IFStatement> "(" negacion(parametros) "," (exp(parametros)|ifFunction(parametros)) "," (exp(parametros)|ifFunction(parametros))")"
  }
   
  void orUnir(ArrayList<String> parametros):
  {}
  {
      andUnir(parametros)  (<OR> andUnir(parametros))*
  }
  
  void andUnir(ArrayList<String> parametros):
  {}
  {
      negacion(parametros)(<AND> negacion(parametros))*
  }
  
  void negacion(ArrayList<String> parametros):
  {}
  {     
      (<NOT>)? (LOOKAHEAD(3)(exp(parametros) (<MAYOR>|<MENOR>|<MENORIGUAL>|<MAYORIGUAL>|<IGUAL>|<DIFERENTE>) exp(parametros)) | "("orUnir(parametros)")")+
  }
  
  void print():
  {}
  {
      <PRINT> "(" (LOOKAHEAD(2)funcionDeclarada()|LOOKAHEAD(2)variableDeclarada(null)|exp(null))+ ")"
  }
  void declararVariable():
  { }
  {
      <VAR> addNombreVariable(null, false) <ASIGNACION> <NUMERO>
  }
  void exp(ArrayList<String> parametros) :
  {}
  {
  // Parses  E -> E + T
  //         E -> E - T
  //         E -> T
  //   in EBNF:  E -> T {+ T   | - T }
    term(parametros) (LOOKAHEAD(2) (< SUMA > term(parametros) | < RESTA > term(parametros)))*
  }
  
  void term(ArrayList<String> parametros) :
  {}
  {
  // Parses  T -> T * F
  //         T -> T / F
  //         T -> F
  //   in EBNF:  T -> F {* F   | /  F }
   fact(parametros) ( < MULTIPLICACION > fact(parametros) | < DIVISION > fact(parametros) )*
  }
  void fact(ArrayList<String> parametros) :
  {
  // Parses  F -> B
  //         F -> -B
  //         B -> num
  //         B -> '(' E ')'
  //   in EBNF:  F -> [-](num |'(' E ')')
  
  }
  {
      (< RESTA >)? ((<NUMERO>|variableDeclarada(parametros))| "(" exp(parametros) ")"|"["exp(parametros)"]" )
  
  }
  
  ArrayList<String> addFuncion() throws Error:
  {
      Token funcion;
      ArrayList<String> parametros = new 	ArrayList<String>();
  }
  {
      
      ((funcion = <VARIABLE>)"("parametro(parametros)")")
      {
           funciones.put(funcion.image, parametros);
           return parametros;
        }
  }
  
  void parametro(ArrayList<String> parametros):
  {}
  {
    addNombreVariable(parametros, true)(","addNombreVariable(parametros, true))*
  }
  
  
  void addNombreVariable(ArrayList<String> parametros,boolean b) throws Error:
  {
      Token variable;
  }
  {
          
      (variable = <VARIABLE>)
      {
          if(!b){
              boolean centinela = false;
              for(int i = 0; i < variables.size() && !centinela; i++)
              {
                    if(variables.get(i).equals(variable.image))
                    {
                       centinela = true;
                       throw new Error("La variable: " + variable.image+" ya existe.");
                    }
              }         
              variables.add(variable.image);
          }
          else if (b){
              parametros.add(variable.image);
          }
                  
      }
  }
  
  
  void expresion():
  {
  }
  {
      ((expresionPeque())(<SUMA>|<MULTIPLICACION>))     
  }
  void expresionPeque():
  {
  }
  {
    LOOKAHEAD(3)funcionDeclarada()|variableDeclarada(null)|"("expresion()")"
  }
  void funcionDeclarada():
  {
      Token funcion;
  }
  {
    (funcion = <VARIABLE>)
      {
          boolean centinela = false;
          Iterator iterator = funciones.entrySet().iterator();
          while(iterator.hasNext()&& !centinela)
          {
                if(iterator.next().equals(funcion.image))
                {
                   centinela = true;
                }
          }
          if(!centinela)
          {         
              throw new Error("La funcion: " + funcion.image +" no ha sido declarada.");
          }
  
      }
  }
  void variableDeclarada(ArrayList<String> parametros):
  {
    Token variable;
  }
  {
    (variable = <VARIABLE>)
      {   
          if(parametros != null){
                boolean a = false;
              for(int i = 0; i < parametros.size() && !a; i++)
              {
                    if(parametros.get(i).equals(variable.image))
                    {
                      a = true;
                    }
              }
              for(int i = 0; i < variables.size() && !a; i++)
              {
                  if(variables.get(i).equals(variable.image))
                  {
                      a = true;
                  }
              }
              if(!a)
              {         
                  throw new Error("La variable: " + variable.image+" no ha sido declarada en el parámetro o en las variables");
              }
              
          }
          else if (parametros == null)
          {
            boolean b = false;
              for(int i = 0; i < variables.size() && !b; i++)
              {
                  if(variables.get(i).equals(variable.image))
                  {
                      b = true;
                  }
              }
              if(!b)
              {         
                  throw new Error("La variable: " + variable.image+" no ha sido declarada en las variables");
              }
          }
         
      }
  }